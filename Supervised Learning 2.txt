import numpy as np
import pandas as pd

df = pd.read_csv('heart.csv') #USES THE UNMODIFIED DATASET
df.sample(5)

#Need to split data into training set and testing set
from sklearn.model_selection import train_test_split

X = df.drop('HeartDisease', axis=1)
Y = df['HeartDisease']

X_train, X_test, Y_train, Y_test = train_test_split(
    X, Y, 
    test_size=0.2, random_state=42
)


import functools
import tensorflow as tf

LABEL_COLUMN = 'HeartDisease'
LABELS = [0, 12]

def get_dataset(file_path, **kwargs):
    dataset = tf.data.experimental.make_csv_dataset(
        file_path,
        batch_size=5, # Artificially small to make examples easier to show.
        label_name=LABEL_COLUMN,
        na_value="?",
        num_epochs=1,
        ignore_errors=True, 
        **kwargs)
    return dataset

raw_training_data = get_dataset("heart.csv")
raw_testing_data = get_dataset("heart.csv")


def show_batch(dataset):
      for batch, label in dataset.take(1):
        for key, value in batch.items():
              print("{:20s}: {}".format(key,value.numpy()))

show_batch(raw_training_data)


class PackNumericFeatures(object):
    def __init__(self, names):
        self.names = names

    def __call__(self, features, labels):
        numeric_features = [features.pop(name) for name in self.names]
        numeric_features = [tf.cast(feat, tf.float32) for feat in numeric_features]
        numeric_features = tf.stack(numeric_features, axis=-1)
        features['numeric'] = numeric_features

        return features, labels
NUMERIC_FEATURES = ['Age','RestingBP','Cholesterol', 'FastingBS', 'MaxHR', 'Oldpeak']

packed_train_data = raw_training_data.map(
    PackNumericFeatures(NUMERIC_FEATURES))

packed_test_data = raw_testing_data.map(
    PackNumericFeatures(NUMERIC_FEATURES))

show_batch(packed_train_data)
example_batch, labels_batch = next(iter(packed_train_data)) 

CATEGORIES = {
    'Sex': ['M', 'F'],
    'ChestPainType' : ['ATA', 'ASY', 'NAP','TA'],
    'RestingECG' : ['LVH', 'Normal', 'ST'],
    'ExerciseAngina' : ['Y', 'N'],
    'ST_Slope' : ['Up', 'Flat','Down']
}

categorical_columns = []
for feature, vocab in CATEGORIES.items():
    cat_col = tf.feature_column.categorical_column_with_vocabulary_list(
        key=feature, vocabulary_list=vocab)
    categorical_columns.append(tf.feature_column.indicator_column(cat_col))

categorical_columns

import pandas as pd
desc = pd.read_csv('heart.csv')[NUMERIC_FEATURES].describe()
desc

MEAN = np.array(desc.T['mean'])
STD = np.array(desc.T['std'])

def normalize_numeric_data(data, mean, std):
  # Center the data
  return (data-mean)/std

# See what you just created.
normalizer = functools.partial(normalize_numeric_data, mean=MEAN, std=STD)

numeric_column = tf.feature_column.numeric_column('numeric', normalizer_fn=normalizer, shape=[len(NUMERIC_FEATURES)])
numeric_columns = [numeric_column]
numeric_column

example_batch['numeric']

numeric_layer = tf.keras.layers.DenseFeatures(numeric_columns)
numeric_layer(example_batch).numpy()

categorical_layer = tf.keras.layers.DenseFeatures(categorical_columns)
print(categorical_layer(example_batch).numpy()[0])

preprocessing_layer = tf.keras.layers.DenseFeatures(categorical_columns+numeric_columns)

print(preprocessing_layer(example_batch).numpy()[0])

model = tf.keras.Sequential([
  preprocessing_layer,
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(1),
])

model.compile(
    loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
    optimizer='adam',
    metrics=['accuracy'])

train_data = packed_train_data.shuffle(500)
test_data = packed_test_data

model.fit(train_data, epochs=20)

test_loss, test_accuracy = model.evaluate(test_data)

predictions = model.predict(test_data)

# Show some results
for prediction, HD in zip(predictions[:10], list(test_data)[0][1][:10]):
    prediction = tf.sigmoid(prediction).numpy()
    print("Predicted chance of having a Heart Disease: {:.2%}".format(prediction[0])," | Actual outcome: ",
          ("Has a Heart Disease" if bool(HD) else "Has no Heart Disease"))